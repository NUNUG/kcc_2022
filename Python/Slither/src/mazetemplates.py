class MazeTemplates:
	"""This class contains templates which you can edit to create new mazes.  
	Each maze is made of text, but this class knows how to convert it to 
	walls and floors for the game to use."""
	def __init__(self):
		# To create a new map, add a new line inside this array.
		# Then create the new function with the template text inside it.
		# Use * for a wall, . for a space, and x for the starting postition.
		# All maze templates MUST be 50 rows of 80 columns.
		# All maze templates should have an outer wall.  Don't let your snake escape!
		# You can just copy the "def template_emtymaze()" function to get started!
		self.templates = [
			self.template_emptymaze()
			#self.template_twobarsmaze(),
			#self.template_innerwallmaze(),
			#self.template_checkersmaze(),
			#self.template_zigzagmaze()
		]
	def template_emptymaze(self):
		return [
			"********************************************************************************",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*.......................................x......................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"*..............................................................................*",
			"********************************************************************************",
		]
	def maze_count(self):
		"""This tells us how many maze templates we have available."""
		return len(self.templates)
	# def render_maze(self, template : str):
	# 	"""This converts a maze template from the text structure we have defined 
	# 	in this class to a usable 2D array of integer values, each representing 
	# 	a wall (1) or floor (0)."""
	# 	in_list = template
	# 	out_list = []

	# 	for line in in_list:
	# 		chars = list(line)
	# 		out_line = []
	# 		for c in chars:
	# 			if (c == "*"):
	# 				out_line.append(BLOCKTYPE_WALL)
	# 			elif (c == "x"):
	# 				out_line.append(BLOCKTYPE_STARTING_POSITION)
	# 			else:
	# 				out_line.append(BLOCKTYPE_FLOOR)
	# 		out_list.append(out_line)
	# 	return out_list


# BLOCKTYPE_STARTING_POSITION : int = 2
# BLOCKTYPE_WALL : int = 1
# BLOCKTYPE_FLOOR : int = 0